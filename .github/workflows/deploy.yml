name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  APP_NAME: 'bowa-backend'
  APP_DIR: '/var/www/bowa-backend'
  SERVICE_NAME: 'bowa-backend'
  BACKEND_PORT: 3000
  ADMIN_PORT: 3002

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Create deployment package
        run: |
          # Clean up any temporary files first
          find . -name "*.tmp" -delete || true
          find . -name "*.lock" -delete || true
          find . -name "*.tsbuildinfo" -delete || true
          
          # Stop any background processes
          sudo pkill -f "npm" || true
          sudo pkill -f "node" || true
          
          # Wait for any file operations to complete
          sleep 5
          
          # Create deployment directory with only essential files
          mkdir -p deployment-staging
          
          # Copy only essential files for production
          echo "Copying essential files..."
          cp package.json deployment-staging/ || true
          cp -r dist deployment-staging/ || true
          cp -r src deployment-staging/ || true
          cp -r static deployment-staging/ || true
          cp tsconfig.json deployment-staging/ || true
          cp vendure-config.ts deployment-staging/ || true
          
          # Create a clean package.json for production
          cd deployment-staging
          
          # Create archive from staging directory (exclude development files)
          cd ..
          tar --exclude='*.log' \
              --exclude='*.tmp' \
              --exclude='node_modules' \
              --exclude='.git*' \
              --exclude='coverage' \
              --exclude='test' \
              --exclude='tests' \
              --exclude='spec' \
              --exclude='*.spec.*' \
              --exclude='*.test.*' \
              -czf deployment.tar.gz -C deployment-staging .
          
          # Verify archive
          echo "Archive contents:"
          tar -tzf deployment.tar.gz | head -20
          
          # Cleanup staging
          rm -rf deployment-staging
            
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
          
      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to VPS
        run: |
          scp deployment.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          echo "🚀 Starting deployment..."
          
          # Update system
          sudo apt update
          
          # Install Node.js 20 if not present
          if ! command -v node &> /dev/null; then
              echo "📦 Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
          fi
          
          # Install PM2 globally if not present
          if ! command -v pm2 &> /dev/null; then
              echo "📦 Installing PM2..."
              sudo npm install -g pm2
          fi
          
          # Install NGINX if not present
          if ! command -v nginx &> /dev/null; then
              echo "📦 Installing NGINX..."
              sudo apt install -y nginx
          fi
          
          # Create application directory and setup user
          echo "📁 Setting up application directory..."
          sudo mkdir -p ${{ env.APP_DIR }}
          sudo mkdir -p /var/www/.npm
          sudo mkdir -p /var/log/pm2
          
          # Ensure www-data user exists and has proper shell
          sudo usermod -s /bin/bash www-data || true
          sudo chown -R www-data:www-data /var/www/
          
          # Stop existing PM2 processes
          echo "🛑 Cleaning up existing processes..."
          pm2 stop all || true
          pm2 delete all || true
          pm2 kill || true
          
          # Wait for cleanup
          sleep 3
          
          # Extract application
          echo "📦 Extracting application..."
          cd ${{ env.APP_DIR }}
          
          # Clean existing installation
          sudo rm -rf * .* 2>/dev/null || true
          
          # Extract with error handling
          if sudo tar -xzf /tmp/deployment.tar.gz -C ${{ env.APP_DIR }} 2>/dev/null; then
              echo "✅ Extraction successful"
          else
              echo "⚠️ Extraction had warnings but continued"
          fi
          
          sudo chown -R www-data:www-data ${{ env.APP_DIR }}
          
          # Fix npm cache permissions
          echo "🔧 Fixing npm permissions..."
          sudo chown -R www-data:www-data /var/www/.npm || true
          sudo mkdir -p /var/www/.npm
          sudo chown -R www-data:www-data /var/www/.npm
          
          # Clean npm cache
          sudo -u www-data npm cache clean --force || true
          
          # Remove any corrupted node_modules
          sudo rm -rf node_modules package-lock.json || true
          
          # Install dependencies
          echo "📥 Installing dependencies..."
          sudo -u www-data npm install --production --no-package-lock
          
          # Create environment file
          echo "⚙️ Creating environment configuration..."
          sudo -u www-data tee .env > /dev/null << 'EOL'
          APP_ENV=production
          PORT=${{ env.BACKEND_PORT }}
          SUPERADMIN_USERNAME=${{ secrets.SUPERADMIN_USERNAME }}
          SUPERADMIN_PASSWORD=${{ secrets.SUPERADMIN_PASSWORD }}
          COOKIE_SECRET=${{ secrets.COOKIE_SECRET }}
          EOL
          
          sudo chown www-data:www-data .env
          sudo chmod 600 .env
          
          # Create logs directory
          mkdir -p logs
          sudo chown -R www-data:www-data logs
          
          # Start application with PM2
          echo "🚀 Starting application..."
          sudo -u www-data pm2 start dist/index.js --name "${{ env.SERVICE_NAME }}-server" --force
          sudo -u www-data pm2 save
          
          # Setup PM2 startup
          sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u www-data --hp /var/www
          
          # Enable and start nginx
          sudo systemctl enable nginx
          sudo systemctl start nginx
          
          # Configure NGINX for Vendure
          echo "🌐 Configuring NGINX..."
          sudo tee /etc/nginx/sites-available/${{ env.APP_NAME }} > /dev/null << 'NGINXCONF'
          # Bowa Vendure Backend NGINX Configuration
          server {
              listen 80;
              server_name ${{ secrets.DOMAIN }} api.${{ secrets.DOMAIN }};
              
              # Redirect HTTP to HTTPS (uncomment when SSL is configured)
              # return 301 https://$server_name$request_uri;
              
              # For now, serve HTTP directly
              # Shop API
              location /shop-api {
                  proxy_pass http://127.0.0.1:${{ env.BACKEND_PORT }}/shop-api;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  proxy_read_timeout 86400;
                  
                  # CORS headers
                  add_header Access-Control-Allow-Origin "*" always;
                  add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                  add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                  add_header Access-Control-Allow-Credentials true always;
                  
                  # Handle preflight requests
                  if ($request_method = 'OPTIONS') {
                      add_header Access-Control-Allow-Origin "*";
                      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                      add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
                      add_header Access-Control-Max-Age 86400;
                      return 204;
                  }
              }
              
              # Admin API
              location /admin-api {
                  proxy_pass http://127.0.0.1:${{ env.BACKEND_PORT }}/admin-api;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
              
              # Admin UI (if you want to serve it from same domain)
              location /admin {
                  proxy_pass http://127.0.0.1:${{ env.ADMIN_PORT }};
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
              
              # Assets
              location /assets {
                  proxy_pass http://127.0.0.1:${{ env.BACKEND_PORT }}/assets;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              
              # Health check
              location /health {
                  proxy_pass http://127.0.0.1:${{ env.BACKEND_PORT }}/health;
                  access_log off;
              }
              
              # Root redirect
              location / {
                  return 302 /admin;
              }
          }
          NGINXCONF
          
          # Enable site and restart NGINX
          sudo ln -sf /etc/nginx/sites-available/${{ env.APP_NAME }} /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t && sudo systemctl reload nginx
          
          # Cleanup
          rm -f /tmp/deployment.tar.gz
          
          echo "✅ Deployment completed successfully!"
          echo "📊 PM2 Status:"
          pm2 status
          
          # Verify application is running
          echo "🔍 Verifying application..."
          sleep 10
          
          # Test local application
          if curl -f http://localhost:${{ env.BACKEND_PORT }}/health 2>/dev/null; then
              echo "✅ Application is responding locally on port ${{ env.BACKEND_PORT }}"
          else
              echo "⚠️ Application may not be responding yet (check logs with: pm2 logs)"
          fi
          
          # Test NGINX proxy
          if curl -f http://localhost/health 2>/dev/null; then
              echo "✅ NGINX proxy is working"
          else
              echo "⚠️ NGINX proxy setup may need verification"
          fi
          
          # Show application info
          echo ""
          echo "🌐 Your Vendure Backend is now accessible at:"
          echo "  📱 Shop API: http://${{ secrets.DOMAIN }}/shop-api"
          echo "  🔧 Admin API: http://${{ secrets.DOMAIN }}/admin-api"
          echo "  👤 Admin UI: http://${{ secrets.DOMAIN }}/admin"
          echo "  🖼️ Assets: http://${{ secrets.DOMAIN }}/assets"
          echo ""
          echo "🔧 Replace localhost URLs in your frontend with:"
          echo "  ❌ OLD: http://localhost:3000/shop-api"
          echo "  ✅ NEW: http://${{ secrets.DOMAIN }}/shop-api"
          echo ""
          echo "📊 Management Commands:"
          echo "  - Directory: ${{ env.APP_DIR }}"
          echo "  - PM2 Logs: pm2 logs ${{ env.SERVICE_NAME }}-server"
          echo "  - PM2 Status: pm2 status"
          echo "  - NGINX Status: sudo systemctl status nginx"
          echo "  - NGINX Config Test: sudo nginx -t"
          EOF
name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'
  APP_NAME: 'bowa-backend'
  APP_DIR: '/var/www/bowa-backend'
  SERVICE_NAME: 'bowa-backend'
  BACKEND_PORT: 3000
  ADMIN_PORT: 3002

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Wait for build to complete
        run: sleep 5
        
      - name: Create deployment package
        run: |
          tar --exclude=node_modules \
              --exclude=.git \
              --exclude=.github \
              --exclude=*.log \
              --exclude=vendure.sqlite \
              --exclude=.next \
              --exclude=.cache \
              --exclude=.npm \
              --exclude=.nuxt \
              --exclude=dist/.tsbuildinfo \
              --exclude=.DS_Store \
              --exclude=Thumbs.db \
              -czf deployment.tar.gz .
            
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
          
      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to VPS
        run: |
          # Upload deployment package
          scp deployment.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
          
          # Execute deployment on VPS
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            set -e
            
            # Colors for output
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            NC='\033[0m'
            
            echo -e "${GREEN}Starting deployment of Bowa Vendure Backend...${NC}"
            
            # Check if running as root or with sudo access
            if [ "$EUID" -ne 0 ] && ! sudo -n true 2>/dev/null; then
                echo -e "${RED}Error: Need root access or passwordless sudo${NC}" >&2
                exit 1
            fi
            
            # Use sudo if not root
            SUDO_CMD=""
            if [ "$EUID" -ne 0 ]; then
                SUDO_CMD="sudo"
            fi
            
            echo -e "${YELLOW}1. Update system packages...${NC}"
            $SUDO_CMD apt update && $SUDO_CMD apt upgrade -y
            
            echo -e "${YELLOW}2. Install Node.js, npm and PM2 if not present...${NC}"
            if ! command -v node &> /dev/null; then
                curl -fsSL https://deb.nodesource.com/setup_20.x | $SUDO_CMD bash -
                $SUDO_CMD apt install -y nodejs
            fi
            
            if ! command -v pm2 &> /dev/null; then
                $SUDO_CMD npm install -g pm2
            fi
            
            echo -e "${YELLOW}3. Install NGINX if not present...${NC}"
            if ! command -v nginx &> /dev/null; then
                $SUDO_CMD apt install -y nginx
            fi
            
            echo -e "${YELLOW}4. Prepare application directory...${NC}"
            $SUDO_CMD mkdir -p ${{ env.APP_DIR }}
            
            # Stop existing PM2 processes
            if pm2 list | grep -q "${{ env.SERVICE_NAME }}"; then
                echo -e "${YELLOW}Stopping existing PM2 processes...${NC}"
                pm2 stop ${{ env.SERVICE_NAME }}-server || true
                pm2 stop ${{ env.SERVICE_NAME }}-worker || true
                pm2 delete ${{ env.SERVICE_NAME }}-server || true
                pm2 delete ${{ env.SERVICE_NAME }}-worker || true
            fi
            
            echo -e "${YELLOW}5. Extract and deploy application...${NC}"
            cd ${{ env.APP_DIR }}
            $SUDO_CMD tar -xzf /tmp/deployment.tar.gz -C ${{ env.APP_DIR }} --strip-components=1
            $SUDO_CMD chown -R www-data:www-data ${{ env.APP_DIR }}
            
            echo -e "${YELLOW}6. Install dependencies...${NC}"
            $SUDO_CMD -u www-data npm install --production
            
            echo -e "${YELLOW}7. Create environment configuration...${NC}"
            $SUDO_CMD tee ${{ env.APP_DIR }}/.env > /dev/null << EOL
            APP_ENV=production
            PORT=${{ env.BACKEND_PORT }}
            SUPERADMIN_USERNAME=${{ secrets.SUPERADMIN_USERNAME }}
            SUPERADMIN_PASSWORD=${{ secrets.SUPERADMIN_PASSWORD }}
            COOKIE_SECRET=${{ secrets.COOKIE_SECRET }}
            DB_TYPE=${{ secrets.DB_TYPE || 'sqlite' }}
            DB_HOST=${{ secrets.DB_HOST || '' }}
            DB_PORT=${{ secrets.DB_PORT || '' }}
            DB_NAME=${{ secrets.DB_NAME || '' }}
            DB_USERNAME=${{ secrets.DB_USERNAME || '' }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD || '' }}
            EOL
            
            $SUDO_CMD chown www-data:www-data ${{ env.APP_DIR }}/.env
            $SUDO_CMD chmod 600 ${{ env.APP_DIR }}/.env
            
            echo -e "${YELLOW}8. Configure PM2...${NC}"
            $SUDO_CMD -u www-data tee ${{ env.APP_DIR }}/ecosystem.config.js > /dev/null << EOL
            module.exports = {
              apps: [
                {
                  name: '${{ env.SERVICE_NAME }}-server',
                  script: './dist/index.js',
                  instances: 1,
                  exec_mode: 'cluster',
                  env: {
                    NODE_ENV: 'production',
                    PORT: ${{ env.BACKEND_PORT }}
                  },
                  error_file: './logs/err.log',
                  out_file: './logs/out.log',
                  log_file: './logs/combined.log',
                  time: true,
                  max_memory_restart: '500M'
                },
                {
                  name: '${{ env.SERVICE_NAME }}-worker',
                  script: './dist/index-worker.js',
                  instances: 1,
                  exec_mode: 'fork',
                  env: {
                    NODE_ENV: 'production'
                  },
                  error_file: './logs/worker-err.log',
                  out_file: './logs/worker-out.log',
                  log_file: './logs/worker-combined.log',
                  time: true,
                  max_memory_restart: '300M'
                }
              ]
            }
            EOL
            
            # Create logs directory
            $SUDO_CMD mkdir -p ${{ env.APP_DIR }}/logs
            $SUDO_CMD chown -R www-data:www-data ${{ env.APP_DIR }}/logs
            
            echo -e "${YELLOW}9. Start application with PM2...${NC}"
            cd ${{ env.APP_DIR }}
            $SUDO_CMD -u www-data pm2 start ecosystem.config.js
            $SUDO_CMD -u www-data pm2 save
            
            # Setup PM2 startup if not already configured
            if ! systemctl is-enabled pm2-www-data &> /dev/null; then
                $SUDO_CMD env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u www-data --hp /var/www
            fi
            
            echo -e "${YELLOW}10. Configure NGINX...${NC}"
            $SUDO_CMD tee /etc/nginx/sites-available/${{ env.APP_NAME }} > /dev/null << 'EOL'
            # Bowa Backend NGINX Configuration
            server {
                listen 80;
                server_name api.${{ secrets.DOMAIN }} admin.${{ secrets.DOMAIN }};
                
                # Redirect HTTP to HTTPS
                return 301 https://$server_name$request_uri;
            }
            
            server {
                listen 443 ssl http2;
                server_name api.${{ secrets.DOMAIN }};
                
                # SSL Configuration
                ssl_certificate /etc/letsencrypt/live/${{ secrets.DOMAIN }}/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/${{ secrets.DOMAIN }}/privkey.pem;
                
                # SSL Settings
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
                ssl_prefer_server_ciphers off;
                
                # API Backend
                location / {
                    proxy_pass http://127.0.0.1:${{ env.BACKEND_PORT }};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                    proxy_read_timeout 86400;
                    
                    # CORS headers
                    add_header Access-Control-Allow-Origin "https://${{ secrets.FRONTEND_DOMAIN }}" always;
                    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                    add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                    add_header Access-Control-Allow-Credentials true always;
                }
                
                # Assets
                location /assets {
                    alias /var/www/bowa-backend/static/assets;
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }
                
                # Health check
                location /health {
                    access_log off;
                    return 200 "healthy\n";
                    add_header Content-Type text/plain;
                }
            }
            
            server {
                listen 443 ssl http2;
                server_name admin.${{ secrets.DOMAIN }};
                
                # SSL Configuration (same as above)
                ssl_certificate /etc/letsencrypt/live/${{ secrets.DOMAIN }}/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/${{ secrets.DOMAIN }}/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
                ssl_prefer_server_ciphers off;
                
                # Admin UI
                location / {
                    proxy_pass http://127.0.0.1:${{ env.ADMIN_PORT }};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            EOL
            
            # Enable site
            $SUDO_CMD ln -sf /etc/nginx/sites-available/${{ env.APP_NAME }} /etc/nginx/sites-enabled/
            $SUDO_CMD nginx -t && $SUDO_CMD systemctl reload nginx
            
            echo -e "${YELLOW}11. Configure firewall...${NC}"
            $SUDO_CMD ufw allow 22/tcp
            $SUDO_CMD ufw allow 80/tcp
            $SUDO_CMD ufw allow 443/tcp
            $SUDO_CMD ufw --force enable
            
            # Cleanup
            rm -f /tmp/deployment.tar.gz
            
            echo -e "${GREEN}Deployment completed successfully!${NC}"
            echo ""
            echo -e "${GREEN}Your backend is accessible at:${NC}"
            echo -e "API: https://api.${{ secrets.DOMAIN }}"
            echo -e "Admin: https://admin.${{ secrets.DOMAIN }}"
            echo ""
            echo -e "${GREEN}PM2 Status:${NC}"
            pm2 status
          ENDSSH

      - name: Health Check
        run: |
          # Wait for services to start
          sleep 30
          
          # Check if API is responding
          if ! curl -f -s --max-time 10 "https://api.${{ secrets.DOMAIN }}/health" > /dev/null; then
            echo "❌ API health check failed"
            exit 1
          fi
          
          echo "✅ Deployment successful and API is responding"

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment to ${{ secrets.DOMAIN }} completed successfully"
          else
            echo "❌ Deployment to ${{ secrets.DOMAIN }} failed"
          fi 